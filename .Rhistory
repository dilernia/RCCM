mll <- 0
for(k in 1:K) {
lk1 <- mvtnorm::dmvnorm(datmats[[k]], sigma = solve(omegaks[, , k]), log = T)
lk2 <- log(sum(sapply(1:G, FUN = function(g) {
pis[g, k] * rccm::dwishart(omegaks[, , k], M = omega0s[, , g], logged = FALSE)})))
mll <- mll + lk1 + lk2
}
return(mll)
}
modelLogLikelihood(omegaks = myData$Omegaks, omega0s = myData$Omega0s, pis = myData$zgks, datmats = myData$simDat)
myData$zgks
wMat <- matrix(0, nrow = length(myData$simDat), ncol = dim(myData$Omega0s)[3])
for(i in 1:length(myData$zgks)){wMat[i, myData$zgks[i]] <- 1}
wMat
wMat <- matrix(0, ncol = length(myData$simDat), nrow = dim(myData$Omega0s)[3])
for(i in 1:length(myData$zgks)){wMat[myData$zgks[i], i] <- 1}
wMat
modelLogLikelihood(omegaks = myData$Omegaks, omega0s = myData$Omega0s, pis = wMat, datmats = myData$simDat)
?rccm::dwishart
modelLogLikelihood <- function(omegaks, omega0s, pis, datmats, lambda2) {
G <- dim(omega0s)[3]
K <- dim(omegaks)[3]
mll <- 0
for(k in 1:K) {
lk1 <- mvtnorm::dmvnorm(datmats[[k]], sigma = solve(omegaks[, , k]), log = T)
lk2 <- log(sum(sapply(1:G, FUN = function(g) {
pis[g, k] * rccm::dwishart(omegaks[, , k], M = omega0s[, , g], logged = FALSE, nu = lambda2)})))
mll <- mll + lk1 + lk2
}
return(mll)
}
modelLogLikelihood(omegaks = myData$Omegaks, omega0s = myData$Omega0s, pis = wMat, datmats = myData$simDat,
lambda2 = 10)
modelLogLikelihood <- function(omegaks, omega0s, pis, datmats, lambda2) {
G <- dim(omega0s)[3]
K <- dim(omegaks)[3]
mll <- 0
for(k in 1:K) {
lk1 <- sum(mvtnorm::dmvnorm(datmats[[k]], sigma = solve(omegaks[, , k]), log = T))
lk2 <- log(sum(sapply(1:G, FUN = function(g) {
pis[g, k] * rccm::dwishart(omegaks[, , k], M = omega0s[, , g], logged = FALSE, nu = lambda2)})))
mll <- mll + lk1 + lk2
}
return(mll)
}
modelLogLikelihood(omegaks = myData$Omegaks, omega0s = myData$Omega0s, pis = wMat, datmats = myData$simDat,
lambda2 = 10)
log(0.90)
log(0.10)
log(0.01)
log(0.001)
log(0.50)
wMat
modelLogLikelihood(omegaks = myData$Omegaks, omega0s = myData$Omega0s, pis = wMat, datmats = myData$simDat,
lambda2 = 10)
modelLogLikelihood(omegaks = myData$Omegaks, omega0s = myData$Omega0s, pis = wMat, datmats = myData$simDat,
lambda2 = 100)
modelLogLikelihood(omegaks = myData$Omegaks, omega0s = myData$Omega0s, pis = wMat, datmats = myData$simDat,
lambda2 = 1)
modelLogLikelihood(omegaks = myData$Omegaks, omega0s = myData$Omega0s, pis = wMat, datmats = myData$simDat,
lambda2 = 9)
modelLogLikelihood(omegaks = myData$Omegaks, omega0s = myData$Omega0s, pis = wMat, datmats = myData$simDat,
lambda2 = 10)
modelLogLikelihood(omegaks = myData$Omegaks, omega0s = myData$Omega0s, pis = wMat, datmats = myData$simDat,
lambda2 = 11)
modelLogLikelihood(omegaks = myData$Omegaks, omega0s = myData$Omega0s, pis = wMat, datmats = myData$simDat,
lambda2 = 10)
modelLogLikelihood(omegaks = myData$Omegaks, omega0s = myData$Omega0s, pis = wMat, datmats = myData$simDat,
lambda2 = 9.99)
modelLogLikelihood(omegaks = myData$Omegaks, omega0s = myData$Omega0s, pis = wMat, datmats = myData$simDat,
lambda2 = 10)
modelLogLikelihood(omegaks = myData$Omegaks, omega0s = myData$Omega0s, pis = wMat, datmats = myData$simDat,
lambda2 = 1000)
modelLogLikelihood(omegaks = myData$Omegaks, omega0s = myData$Omega0s, pis = wMat, datmats = myData$simDat,
lambda2 = 100)
modelLogLikelihood(omegaks = myData$Omegaks, omega0s = myData$Omega0s, pis = wMat, datmats = myData$simDat,
lambda2 = 500)
modelLogLikelihood(omegaks = myData$Omegaks, omega0s = myData$Omega0s, pis = wMat, datmats = myData$simDat,
lambda2 = 20)
modelLogLikelihood(omegaks = myData$Omegaks, omega0s = myData$Omega0s, pis = wMat, datmats = myData$simDat,
lambda2 = 30)
modelLogLikelihood(omegaks = myData$Omegaks, omega0s = myData$Omega0s, pis = wMat, datmats = myData$simDat,
lambda2 = 10)
modelLogLikelihood(omegaks = myData$Omegaks, omega0s = myData$Omega0s, pis = wMat, datmats = myData$simDat,
lambda2 = 10)
modelLogLikelihood(omegaks = myData$Omegaks, omega0s = myData$Omega0s, pis = wMat, datmats = myData$simDat,
lambda2 = 10)
wMat <- matrix(0, ncol = length(myData$simDat), nrow = dim(myData$Omega0s)[3])
for(i in 1:length(myData$zgks)){
wMat[abs(1-myData$zgks[i]), i] <- 1
}
wMat
wMat <- matrix(0, ncol = length(myData$simDat), nrow = dim(myData$Omega0s)[3])
for(i in 1:length(myData$zgks)){
wMat[ifelse(myData$zgks[i] == 1, 2, 1), i] <- 1
}
wMat
modelLogLikelihood(omegaks = myData$Omegaks, omega0s = myData$Omega0s, pis = wMat, datmats = myData$simDat,
lambda2 = 10)
wMat <- matrix(0, ncol = length(myData$simDat), nrow = dim(myData$Omega0s)[3])
for(i in 1:length(myData$zgks)){
wMat[myData$zgks[i], i] <- 1
}
modelLogLikelihood(omegaks = myData$Omegaks, omega0s = myData$Omega0s, pis = wMat, datmats = myData$simDat,
lambda2 = 10)
exp(-27589.07) / exp(-27612.19)
exp(-27589.07 +27612.19)
modelLogLikelihood(omegaks = myData$Omegaks, omega0s = myData$Omega0s, pis = wMat, datmats = myData$simDat,
lambda2 = 10)
modelLogLikelihood <- function(omegaks, omega0s, ws, x, lambda2) {
G <- dim(omega0s)[3]
K <- dim(omegaks)[3]
mll <- 0
for(k in 1:K) {
lk1 <- sum(mvtnorm::dmvnorm(x[[k]], sigma = solve(omegaks[, , k]), log = T))
lk2 <- log(sum(sapply(1:G, FUN = function(g) {
ws[g, k] * rccm::dwishart(omegaks[, , k], M = omega0s[, , g], logged = FALSE, nu = lambda2)})))
mll <- mll + lk1 + lk2
}
return(mll)
}
aic <- function(omegaks, omega0s, ws, x, lambda2) {
K <- dim(omegaks)[3]
G <- dim(omegags)[3]
nks <- sapply(x, FUN = nrow)
dfks <- sapply(X = 1:K, FUN = function(k) {
sum(adj(omegaks[, , k])[lower.tri(omegaks[, , k])])
})
dfgs <- sapply(X = 1:G, FUN = function(g) {
sum(adj(omegags[, , g])[lower.tri(omegags[, , g])])
})
modelDim <- sum(c(dfks, dfgs))
mll <- modelLogLikelihood(omegaks = omegaks, omega0s = omega0s, ws = ws, x = x, lambda2 = lambda2)
aic <- 2*modelDim - 2*mll
return(aic)
}
aic(omegaks = myData$Omegaks, omega0s = myData$Omega0s, ws = wMat, x = myData$simDat,
lambda2 = 10)
aic <- function(omegaks, omega0s, ws, x, lambda2) {
K <- dim(omegaks)[3]
G <- dim(omega0s)[3]
nks <- sapply(x, FUN = nrow)
dfks <- sapply(X = 1:K, FUN = function(k) {
sum(adj(omegaks[, , k])[lower.tri(omegaks[, , k])])
})
dfgs <- sapply(X = 1:G, FUN = function(g) {
sum(adj(omega0s[, , g])[lower.tri(omega0s[, , g])])
})
modelDim <- sum(c(dfks, dfgs))
mll <- modelLogLikelihood(omegaks = omegaks, omega0s = omega0s, ws = ws, x = x, lambda2 = lambda2)
aic <- 2*modelDim - 2*mll
return(aic)
}
aic(omegaks = myData$Omegaks, omega0s = myData$Omega0s, ws = wMat, x = myData$simDat,
lambda2 = 10)
aic <- function(omegaks, omega0s, ws, x, lambda2) {
K <- dim(omegaks)[3]
G <- dim(omega0s)[3]
nks <- sapply(x, FUN = nrow)
dfks <- sapply(X = 1:K, FUN = function(k) {
sum(rccm::adj(omegaks[, , k])[lower.tri(omegaks[, , k])])
})
dfgs <- sapply(X = 1:G, FUN = function(g) {
sum(rccm::adj(omega0s[, , g])[lower.tri(omega0s[, , g])])
})
modelDim <- sum(c(dfks, dfgs))
mll <- modelLogLikelihood(omegaks = omegaks, omega0s = omega0s, ws = ws, x = x, lambda2 = lambda2)
aic <- 2*modelDim - 2*mll
return(aic)
}
aic(omegaks = myData$Omegaks, omega0s = myData$Omega0s, ws = wMat, x = myData$simDat,
lambda2 = 10)
View(myData)
aic(omegaks = myData$Omegaks, omega0s = myData$Omega0s, ws = wMat, x = myData$simDat[1:20], lambda2 = 10)
aic(omegaks = myData$Omegaks, omega0s = myData$Omega0s, ws = wMat, x = myData$simDat[rev(1:20)], lambda2 = 10)
myData <- rccSim(G = 2, clustSize = 10, p = 10, n = 100, overlap = 0.50, rho = 0.10)
myData <- rccm::rccSim(G = 2, clustSize = 10, p = 10, n = 100, overlap = 0.50, rho = 0.10)
K <- length(myData$simDat)
p <- ncol(myData$simDat[[1]])
G <- dim(myData$Omega0s)[3]
wMat <- matrix(0, ncol = length(myData$simDat), nrow = G)
for(i in 1:length(myData$zgks)){
wMat[myData$zgks[i], i] <- 1
}
aic(myData$Omegaks, myData$Omega0swMat, x = myData$simDat, lambda2 = p)
modelLogLikelihood <- function(omegaks, omega0s, ws, x, lambda2) {
G <- dim(omega0s)[3]
K <- dim(omegaks)[3]
mll <- 0
for(k in 1:K) {
lk1 <- sum(mvtnorm::dmvnorm(x[[k]], sigma = solve(omegaks[, , k]), log = T))
lk2 <- log(sum(sapply(1:G, FUN = function(g) {
ws[g, k] * rccm::dwishart(omegaks[, , k], M = omega0s[, , g], logged = FALSE, nu = lambda2)})))
mll <- mll + lk1 + lk2
}
return(mll)
}
aic <- function(omegaks, omega0s, ws, x, lambda2) {
K <- dim(omegaks)[3]
G <- dim(omega0s)[3]
dfks <- sapply(X = 1:K, FUN = function(k) {
sum(rccm::adj(omegaks[, , k])[lower.tri(omegaks[, , k])])
})
dfgs <- sapply(X = 1:G, FUN = function(g) {
sum(rccm::adj(omega0s[, , g])[lower.tri(omega0s[, , g])])
})
modelDim <- sum(c(dfks, dfgs))
mll <- modelLogLikelihood(omegaks = omegaks, omega0s = omega0s, ws = ws, x = x, lambda2 = lambda2)
aic <- 2*modelDim - 2*mll
return(aic)
}
aic(myData$Omegaks, myData$Omega0swMat, x = myData$simDat, lambda2 = p)
aic(myData$Omegaks, myData$Omega0s, wMat, x = myData$simDat, lambda2 = p)
aic(sapply(myData$simDat, FUN = function(datf){solve(cov(datf))}), myData$Omega0s, wMat, x = myData$simDat, lambda2 = p)
aic(sapply(myData$simDat, simplify = "array", FUN = function(datf){solve(cov(datf))}), myData$Omega0s, wMat, x = myData$simDat, lambda2 = p)
# Using true parameters
aic(myData$Omegaks, myData$Omega0s, wMat, x = myData$simDat, lambda2 = p)
# Using MLEs
aic(sapply(myData$simDat, simplify = "array", FUN = function(datf){solve(cov(datf))}),
myData$Omega0s, wMat, x = myData$simDat, lambda2 = p)
# Using glasso estimates
aic(sapply(myData$simDat, simplify = "array", FUN = function(datf){glasso::glasso(cov(datf), rho = 0.01)$wi}),
myData$Omega0s, wMat, x = myData$simDat, lambda2 = p)
# Using glasso estimates
aic(sapply(myData$simDat, simplify = "array", FUN = function(datf){
pmat <- glasso::glasso(cov(datf), rho = 0.01)$wi
return((pmat + t(pmat)) / 2)}),
myData$Omega0s, wMat, x = myData$simDat, lambda2 = p)
# Using true parameters
aic(myData$Omegaks, myData$Omega0s, wMat, x = myData$simDat, lambda2 = p)
# Using MLEs
aic(sapply(myData$simDat, simplify = "array", FUN = function(datf){solve(cov(datf))}),
myData$Omega0s, wMat, x = myData$simDat, lambda2 = p)
# Using glasso estimates
aic(sapply(myData$simDat, simplify = "array", FUN = function(datf){
pmat <- glasso::glasso(cov(datf), rho = 0.01)$wi
return((pmat + t(pmat)) / 2)}),
myData$Omega0s, wMat, x = myData$simDat, lambda2 = p)
# Trying for different tuning values
aicVals <- sapply(seq(0.01, 1, length.out = 100), FUN = function(lambda1) {
aic(sapply(myData$simDat, simplify = "array", FUN = function(datf){
pmat <- glasso::glasso(cov(datf), rho = lambda1)$wi
return((pmat + t(pmat)) / 2)}),
myData$Omega0s, wMat, x = myData$simDat, lambda2 = p)
})
# Trying for different tuning values
candLambs <- seq(0.01, 1, length.out = 100)
# Plotting
plot(x = candLambs, y = aicVals)
# Trying for different tuning values
candLambs <- seq(2, 20, length.out = 100)
aicVals <- sapply(candLambs, FUN = function(lambda1) {
aic(sapply(myData$simDat, simplify = "array", FUN = function(datf){
pmat <- glasso::glasso(cov(datf), rho = 0.07)$wi
return((pmat + t(pmat)) / 2)}),
myData$Omega0s, wMat, x = myData$simDat, lambda2 = lambda1)
})
# Plotting
plot(x = candLambs, y = aicVals)
# Plotting
plot(x = candLambs, y = aicVals)
# Trying for different tuning values
candLambs <- seq(0.01, 1, length.out = 100)
aicVals <- sapply(candLambs, FUN = function(lambda1) {
aic(sapply(myData$simDat, simplify = "array", FUN = function(datf){
pmat <- glasso::glasso(cov(datf), rho = lambda1)$wi
return((pmat + t(pmat)) / 2)}),
myData$Omega0s, wMat, x = myData$simDat, lambda2 = p)
})
# Plotting
plot(x = candLambs, y = aicVals)
# Optimal lambda
candLambs[which.min(aicVals)]
# Trying for different tuning values
candLambs <- seq(0.01, 1, length.out = 100)
aicVals <- sapply(candLambs, FUN = function(lambda1) {
rccm::aicbic(sapply(myData$simDat, simplify = "array", FUN = function(datf){
pmat <- glasso::glasso(cov(datf), rho = lambda1)$wi
return((pmat + t(pmat)) / 2)}),
x = myData$simDat)[1]
})
# Plotting
plot(x = candLambs, y = aicVals, col = 'blue', add = T)
# Optimal lambda
candLambs[which.min(aicVals)]
warnings()
resultRccm <- rccm(x = myData$simDat, lambda1 = 20,
lambda2 = 325, lambda3 = 0.01, nclusts = 2)
resultRccm <- rccm::rccm(x = myData$simDat, lambda1 = 20,
lambda2 = 325, lambda3 = 0.01, nclusts = 2)
resultRccm$weights
aic(omegaks = resultRccm$Omegas, omega0s = resultRccm$Omega0,
ws = resultRccm$weights, x = myData$simDat, lambda2 = 325)
microbenchmark::microbenchmark(aic(omegaks = resultRccm$Omegas, omega0s = resultRccm$Omega0,
ws = resultRccm$weights, x = myData$simDat, lambda2 = 325), times = 20)
myData <- rccSim(G = 2, clustSize = 10, p = 10, n = 100, overlap = 0.50, rho = 0.10)
myData <- rccm::rccSim(G = 2, clustSize = 10, p = 10, n = 100, overlap = 0.50, rho = 0.10)
resultRccm <- rccm(x = myData$simDat, lambda1 = 20,
lambda2 = 325, lambda3 = 0.01, nclusts = 2)
resultRccm <- rccm::rccm(x = myData$simDat, lambda1 = 20,
lambda2 = 325, lambda3 = 0.01, nclusts = 2)
aic(omegaks = resultRccm$Omegas, omega0s = resultRccm$Omega0,
ws = resultRccm$weights, x = myData$simDat, lambda2 = 325)
resultRccm
omegaks = resultRccm$Omegas; omega0s = resultRccm$Omega0;
ws = resultRccm$weights; x = myData$simDat; lambda2 = 325;
K <- dim(omegaks)[3]
G <- dim(omega0s)[3]
dfks <- sapply(X = 1:K, FUN = function(k) {
sum(rccm::adj(omegaks[, , k])[lower.tri(omegaks[, , k])])
})
dfks
dfgs <- sapply(X = 1:G, FUN = function(g) {
sum(rccm::adj(omega0s[, , g])[lower.tri(omega0s[, , g])])
})
dfgs
modelDim <- sum(c(dfks, dfgs))
modelDim
modelDim
modelLogLikelihood(omegaks = omegaks, omega0s = omega0s, ws = ws, x = x, lambda2 = lambda2)
mll <- 0
k = 1
lk1 <- sum(mvtnorm::dmvnorm(x[[k]], sigma = solve(omegaks[, , k]), log = T))
lk1
lk2 <- log(sum(sapply(1:G, FUN = function(g) {
ws[g, k] * rccm::dwishart(omegaks[, , k], M = omega0s[, , g], logged = FALSE, nu = lambda2)})))
lk2
sum(sapply(1:G, FUN = function(g) {
ws[g, k] * rccm::dwishart(omegaks[, , k], M = omega0s[, , g], logged = FALSE, nu = lambda2)}))
sapply(1:G, FUN = function(g) {
ws[g, k] * rccm::dwishart(omegaks[, , k], M = omega0s[, , g], logged = FALSE, nu = lambda2)})
ws
rccm::dwishart(omegaks[, , k], M = omega0s[, , 1], logged = FALSE, nu = lambda2)
rccm::dwishart(omegaks[, , k], M = omega0s[, , 1], logged = FALSE, nu = 10)
rccm::dwishart(omegaks[, , k], M = omega0s[, , 1], logged = FALSE, nu = lambda2)
rccm::dwishart(omegaks[, , k], M = omega0s[, , 1], logged = TRUE, nu = lambda2)
exp(rccm::dwishart(omegaks[, , k], M = omega0s[, , 1], logged = TRUE, nu = lambda2))
rccm::dwishart(omegaks[, , k], M = omega0s[, , 2], logged = T, nu = lambda2)
rccm::dwishart(omegaks[, , k], M = omega0s[, , 1], logged = T, nu = lambda2)
modelLogLikelihood(omegaks = omegaks, omega0s = omega0s, ws = ws, x = x, lambda2 = lambda2)
modelLogLikelihood2 <- function(omegaks, omega0s, ws, x, lambda2) {
G <- dim(omega0s)[3]
K <- dim(omegaks)[3]
mll <- 0
for(k in 1:K) {
lk1 <- sum(mvtnorm::dmvnorm(x[[k]], sigma = solve(omegaks[, , k]), log = T))
lk2 <- log(sum(sapply(1:G, FUN = function(g) {
ws[g, k] * rccm::dwishart(omegaks[, , k], M = omega0s[, , g], logged = FALSE, nu = lambda2)})))
mll <- mll + lk1 + lk2
}
return(mll)
}
modelLogLikelihood2 <- function(omegaks, omega0s, ws, x, lambda2) {
G <- dim(omega0s)[3]
K <- dim(omegaks)[3]
mll <- 0
for(k in 1:K) {
lk1 <- sum(mvtnorm::dmvnorm(x[[k]], sigma = solve(omegaks[, , k]), log = T))
lk2 <- log(sum(sapply(1:G, FUN = function(g) {
exp(log(ws[g, k]) + rccm::dwishart(omegaks[, , k], M = omega0s[, , g], logged = T, nu = lambda2))})))
mll <- mll + lk1 + lk2
}
return(mll)
}
modelLogLikelihood(omegaks = omegaks, omega0s = omega0s, ws = ws, x = x, lambda2 = lambda2)
modelLogLikelihood2(omegaks = omegaks, omega0s = omega0s, ws = ws, x = x, lambda2 = lambda2)
exp(-Inf)
exp(log(ws[g, k]) + rccm::dwishart(omegaks[, , k], M = omega0s[, , g], logged = T, nu = lambda2))
exp(log(ws[1, k]) + rccm::dwishart(omegaks[, , k], M = omega0s[, , 1], logged = T, nu = lambda2))
exp(log(ws[2, k]) + rccm::dwishart(omegaks[, , k], M = omega0s[, , 2], logged = T, nu = lambda2))
exp(log(ws[1, k]) + rccm::dwishart(omegaks[, , k], M = omega0s[, , 1], logged = T, nu = lambda2))
log(ws[1, k]) + rccm::dwishart(omegaks[, , k], M = omega0s[, , 1], logged = T, nu = lambda2)
log(ws[2, k]) + rccm::dwishart(omegaks[, , k], M = omega0s[, , 2], logged = T, nu = lambda2)
exp(log(ws[1, k]) + rccm::dwishart(omegaks[, , k], M = omega0s[, , 1], logged = T, nu = lambda2))
exp(log(ws[2, k]) + rccm::dwishart(omegaks[, , k], M = omega0s[, , 2], logged = T, nu = lambda2))
modelLogLikelihood(omegaks = omegaks, omega0s = omega0s, ws = ws, x = x, lambda2 = lambda2)
ws[g, k] * rccm::dwishart(omegaks[, , k], M = omega0s[, , g], logged = FALSE, nu = lambda2)
ws[1, k] * rccm::dwishart(omegaks[, , k], M = omega0s[, , 1], logged = FALSE, nu = lambda2)
ws[1, k]
rccm::dwishart(omegaks[, , k], M = omega0s[, , 1], logged = T, nu = lambda2)
exp(-1050.384)
log(0)
log(exp(-1050.384))
log(exp(-1050.384))
modelLogLikelihood <- function(omegaks, omega0s, ws, x, lambda2) {
G <- dim(omega0s)[3]
K <- dim(omegaks)[3]
mll <- 0
for(k in 1:K) {
lk1 <- sum(mvtnorm::dmvnorm(x[[k]], sigma = solve(omegaks[, , k]), log = T))
if(any(ws[, k] == 1)) {
lk2 <- rccm::dwishart(omegaks[, , k], M = omega0s[, , which(ws[, k] == 1)], logged = T, nu = lambda2)
} else {
lk2 <- log(sum(sapply(1:G, FUN = function(g) {
ws[g, k] * rccm::dwishart(omegaks[, , k], M = omega0s[, , g], logged = F, nu = lambda2)})))
mll <- mll + lk1 + lk2
}
}
return(mll)
}
rccm::dwishart(omegaks[, , k], M = omega0s[, , 1], logged = T, nu = lambda2)
modelLogLikelihood(omegaks = omegaks, omega0s = omega0s, ws = ws, x = x, lambda2 = lambda2)
G <- dim(omega0s)[3]
K <- dim(omegaks)[3]
mll <- 0
k = 1
lk1 <- sum(mvtnorm::dmvnorm(x[[k]], sigma = solve(omegaks[, , k]), log = T))
lk1
lk2 <- rccm::dwishart(omegaks[, , k], M = omega0s[, , which(ws[, k] == 1)], logged = T, nu = lambda2)
lk2
mll <- mll + lk1 + lk2
mll
modelLogLikelihood <- function(omegaks, omega0s, ws, x, lambda2) {
G <- dim(omega0s)[3]
K <- dim(omegaks)[3]
mll <- 0
for(k in 1:K) {
lk1 <- sum(mvtnorm::dmvnorm(x[[k]], sigma = solve(omegaks[, , k]), log = T))
if(any(ws[, k] == 1)) {
lk2 <- rccm::dwishart(omegaks[, , k], M = omega0s[, , which(ws[, k] == 1)], logged = T, nu = lambda2)
mll <- mll + lk1 + lk2
} else {
lk2 <- log(sum(sapply(1:G, FUN = function(g) {
ws[g, k] * rccm::dwishart(omegaks[, , k], M = omega0s[, , g], logged = F, nu = lambda2)})))
mll <- mll + lk1 + lk2
}
}
return(mll)
}
modelLogLikelihood(omegaks = omegaks, omega0s = omega0s, ws = ws, x = x, lambda2 = lambda2)
modelLogLikelihood <- function(omegaks, omega0s, ws, x, lambda2) {
G <- dim(omega0s)[3]
K <- dim(omegaks)[3]
mll <- 0
for(k in 1:K) {
lk1 <- sum(mvtnorm::dmvnorm(x[[k]], sigma = solve(omegaks[, , k]), log = T))
if(any(ws[, k] == 1)) {
lk2 <- rccm::dwishart(omegaks[, , k], M = omega0s[, , which(ws[, k] == 1)], logged = T, nu = lambda2)
mll <- mll + lk1 + lk2
} else {
lk2 <- log(sum(sapply(1:G, FUN = function(g) {
ws[g, k] * rccm::dwishart(omegaks[, , k], M = omega0s[, , g], logged = F, nu = lambda2)})))
mll <- mll + lk1 + lk2
}
}
return(mll)
}
myData <- rccSim(G = 2, clustSize = 10, p = 10, n = 100, overlap = 0.50, rho = 0.10)
myData <- rccm::rccSim(G = 2, clustSize = 10, p = 10, n = 100, overlap = 0.50, rho = 0.10)
resultRccm <- rccm(x = myData$simDat, lambda1 = 20,
lambda2 = 325, lambda3 = 0.01, nclusts = 2)
resultRccm <- rccm::rccm(x = myData$simDat, lambda1 = 20,
lambda2 = 325, lambda3 = 0.01, nclusts = 2)
aic(omegaks = resultRccm$Omegas, omega0s = resultRccm$Omega0,
ws = resultRccm$weights, x = myData$simDat, lambda2 = 325)
aic <- function(omegaks, omega0s, ws, x, lambda2) {
K <- dim(omegaks)[3]
G <- dim(omega0s)[3]
dfks <- sapply(X = 1:K, FUN = function(k) {
sum(rccm::adj(omegaks[, , k])[lower.tri(omegaks[, , k])])
})
dfgs <- sapply(X = 1:G, FUN = function(g) {
sum(rccm::adj(omega0s[, , g])[lower.tri(omega0s[, , g])])
})
modelDim <- sum(c(dfks, dfgs))
mll <- modelLogLikelihood(omegaks = omegaks, omega0s = omega0s, ws = ws, x = x, lambda2 = lambda2)
aic <- 2*modelDim - 2*mll
return(aic)
}
aic(omegaks = resultRccm$Omegas, omega0s = resultRccm$Omega0,
ws = resultRccm$weights, x = myData$simDat, lambda2 = 325)
myData <- rccm::rccSim(G = 2, clustSize = 10, p = 10, n = 100, overlap = 0.50, rho = 0.10)
K <- length(myData$simDat)
p <- ncol(myData$simDat[[1]])
G <- dim(myData$Omega0s)[3]
wMat <- matrix(0, ncol = length(myData$simDat), nrow = G)
for(i in 1:length(myData$zgks)){
wMat[myData$zgks[i], i] <- 1
}
# Using true parameters
aic(myData$Omegaks, myData$Omega0s, wMat, x = myData$simDat, lambda2 = p)
# Using MLEs
aic(sapply(myData$simDat, simplify = "array", FUN = function(datf){solve(cov(datf))}),
myData$Omega0s, wMat, x = myData$simDat, lambda2 = p)
# Using glasso estimates
aic(sapply(myData$simDat, simplify = "array", FUN = function(datf){
pmat <- glasso::glasso(cov(datf), rho = 0.01)$wi
return((pmat + t(pmat)) / 2)}),
myData$Omega0s, wMat, x = myData$simDat, lambda2 = p)
# Trying for different tuning values
candLambs <- seq(0.01, 1, length.out = 100)
aicVals <- sapply(candLambs, FUN = function(lambda1) {
rccm::aicbic(sapply(myData$simDat, simplify = "array", FUN = function(datf){
pmat <- glasso::glasso(cov(datf), rho = lambda1)$wi
return((pmat + t(pmat)) / 2)}),
x = myData$simDat)[1]
})
# Plotting
plot(x = candLambs, y = aicVals, col = 'blue', add = T)
# Trying for different tuning values
candLambs <- seq(0.01, 1, length.out = 100)
aicVals <- sapply(candLambs, FUN = function(lambda1) {
aic(sapply(myData$simDat, simplify = "array", FUN = function(datf){
pmat <- glasso::glasso(cov(datf), rho = lambda1)$wi
return((pmat + t(pmat)) / 2)}), omega0s = myData$Omega0s, ws = wMat,
x = myData$simDat, lambda2 = 10)
})
# Plotting
plot(x = candLambs, y = aicVals, col = 'blue', add = T)
which.min(aicVals)
devtools::document()
devtools::document()
